@startuml
class task4.prog1.Hotel {
~ RoomManager roomManager
~ MaintenanceManager maintenanceManager
~ GuestManager guestManager
}
class task4.prog1.Hotel.RoomManager {
- List<Room> rooms
- <<Create>> RoomManager()
~ void loadRoomsDatabase()
~ void addNewRoom(Room)
~ Room getRoomByNumber(Integer)
~ String getRoomsAsString()
~ String getRoomsAsString(List<Room>)
+ List<Room> sortRooms(List<Room>,Comparator<Room>)
~ List<Room> getRooms()
~ List<Room> getFreeRooms()
~ List<Room> getFreeRooms(LocalDateTime)
}
class task4.prog1.Hotel.MaintenanceManager {
- List<Maintenance> maintenances
- <<Create>> MaintenanceManager()
~ void loadMaintenancesDatabase()
~ void addNewMaintenance(Maintenance)
~ Maintenance getMaintenanceByName(String)
+ String getMaintenancesPriceList()
+ String getMaintenancesPriceList(Comparator<Maintenance>)
+ String getMaintenancesOfGuest(Guest)
+ String getMaintenancesOfGuest(Guest,Comparator<Maintenance>)
}
class task4.prog1.Hotel.GuestManager {
- List<Guest> guests
- <<Create>> GuestManager()
~ void loadGuestsDatabase()
~ List<Guest> getGuests()
~ void addGuest(Guest)
~ void addGuestToRoom(Room,Guest)
~ void removeGuest(Guest)
~ String getGuestsAsString(List<Guest>)
+ List<Guest> sortGuests(List<Guest>,Comparator<Guest>)
+ Guest getGuestByName(String)
}
class task4.prog1.Guest {
- String fullName
- String passport
- Room room
- LocalDateTime checkInTime
- LocalDateTime checkOutTime
- List<Maintenance> orderedMaintenances
- int payment
+ <<Create>> Guest(String,String,LocalDateTime,LocalDateTime,Room)
+ String getFullName()
+ String getPassport()
+ void orderMaintenance(Hotel,String)
+ LocalDateTime getCheckInTime()
+ void setCheckInTime(LocalDateTime)
+ LocalDateTime getCheckOutTime()
+ void setCheckOutTime(LocalDateTime)
+ List<Maintenance> getOrderedMaintenances()
+ String getOrderedMaintenancesAsString()
+ int getPayment()
+ void setPayment(int)
+ Room getRoom()
+ void setRoom(Room)
}
class task4.prog1.Maintenance {
- String name
- int price
- MaintenanceCategory category
- LocalDateTime orderTime
~ <<Create>> Maintenance(String,int,MaintenanceCategory)
~ String getName()
~ void execute(Guest)
+ int getPrice()
+ void setPrice(int)
+ MaintenanceCategory getCategory()
+ LocalDateTime getOrderTime()
+ void setOrderTime(LocalDateTime)
+ String toString()
+ Maintenance clone()
}
class task4.prog1.Room {
- int CAPACITY
- int ROOM_NUMBER
- int STARS_NUMBER
- List<Guest> guestsCurrentList
- List<Guest> guestsAllTimeList
- RoomStatus roomCurrentStatus
- int price
- String details
+ <<Create>> Room(int,int,int,RoomStatus,int)
+ int getCapacity()
+ int getRoomNumber()
+ RoomStatus getRoomCurrentStatus()
+ List<Guest> getGuestsCurrentList()
+ int getPrice()
+ void setPrice(int)
+ void setRoomCurrentStatus(RoomStatus)
~ void addGuest(Guest)
~ void removeGuest(Guest)
+ String getGuestsListAsString(List<Guest>)
+ String toString()
+ int getStarsNumber()
+ String getDetails()
+ void setDetails(String)
+ List<Guest> getLastNGuests(int)
}
class task4.prog1.Main {
+ {static} void main(String[])
}
enum task4.prog1.MaintenanceCategory {
+  LOCAL_FOOD
+  DELIVERY_FOOD
+  ACCESSORIES
}
enum task4.prog1.RoomStatus {
+  UNDER_REPAIR
+  FREE
+  CLEANING
+  BUSY
}


task4.prog1.Hotel +..> task4.prog1.Hotel.RoomManager
task4.prog1.Hotel +..> task4.prog1.Hotel.MaintenanceManager
task4.prog1.Hotel +..> task4.prog1.Hotel.GuestManager
task4.prog1.Cloneable <|.. task4.prog1.Maintenance
task4.prog1.Hotel.MaintenanceManager o..> task4.prog1.Maintenance
task4.prog1.Maintenance *-- task4.prog1.MaintenanceCategory
task4.prog1.Room *-- task4.prog1.RoomStatus
task4.prog1.Hotel.RoomManager o..> task4.prog1.Room
task4.prog1.Hotel.GuestManager ..> task4.prog1.Room
task4.prog1.Hotel.GuestManager o..> task4.prog1.Guest
task4.prog1.Main --> task4.prog1.Hotel
task4.prog1.Hotel.MaintenanceManager ..> task4.prog1.Guest
task4.prog1.Maintenance ..> task4.prog1.Guest
task4.prog1.Guest o..> task4.prog1.Maintenance
task4.prog1.Room o..> task4.prog1.Guest
task4.prog1.Guest o..> task4.prog1.Room
@enduml